import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Scanner;

public class Main {
    static final int MAX_RECORDS = 50;
    static LocalDateTime[] dates = new LocalDateTime[MAX_RECORDS];
    static String[] texts = new String[MAX_RECORDS];

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        boolean running = true;
        System.out.println("–©–æ–¥–µ–Ω–Ω–∏–∫ –∫–æ—Ç–∏–∫–∞ .");

        while (running) {
            System.out.println("\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é —è–∫—É –∑—Ä–æ–±–ª—è—Ç—å –∫–æ—Ç–∏–∫–∏ :");
            System.out.println("1 - –ö–æ—Ç–∏–∫ –¥–æ–¥–∞—Å—Ç—å –∑–∞–ø–∏—Å");
            System.out.println("2 - –ö–æ—Ç–∏–∫ –≤–∏–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å");
            System.out.println("3 - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ –∑–∞–ø–∏—Å–∏ –∫–æ—Ç–∏–∫—ñ–≤");
            System.out.println("0 - –í–∏–π—Ç–∏");
            System.out.print("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∫–æ—Ç–∏–∫–∞: ");
            String choice = scanner.nextLine();

            switch (choice) {
                case "1":
                    addEntry(scanner);
                    break;
                case "2":
                    deleteEntry(scanner);
                    break;
                case "3":
                    showEntries();
                    break;
                case "0":
                    running = false;
                    System.out.println("–î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è! –ù–µ—Ö–∞–π –≤–∞—à—ñ —Å–ø–æ–≥–∞–¥–∏ –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è —Ç–µ–ø–ª–∏–º–∏, —è–∫ –ø—É—Ö–Ω–∞—Å—Ç–∏–π –∫–æ—Ç–∏–∫ –Ω–∞ –∫–æ–ª—ñ–Ω–∞—Ö.");
                    break;
                default:
                    System.out.println("–ö–æ—Ç–∏–∫ –Ω–µ –∑–Ω–∞—î —â–æ —Ä–æ–±–∏—Ç–∏, —Ç–∞–∫–∏—Ö –∫–æ–º–∞–Ω–¥ –º–∏ —â–µ –Ω–µ –∑–Ω–∞—î–º–æ(.");
            }
        }

        scanner.close();
    }

    static void addEntry(Scanner scanner) {
        System.out.print("–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —Ç–∞ —á–∞—Å –∑–∞–ø–∏—Å—É –∞–±–∏ –∫–æ—Ç–∏–∫ –∑—Ä–æ–∑—É–º—ñ–≤ —â–æ —Ä–æ–±–∏—Ç–∏ (—É —Ñ–æ—Ä–º–∞—Ç—ñ –†–†–†–†-–ú–ú-–î–î[T]–≥–≥:—Ö—Ö[:—Å—Å]): ");
        String dateTimeString = scanner.nextLine();

        LocalDateTime dateTime;
        try {
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd['T']HH:mm[:ss]");
            dateTime = LocalDateTime.parse(dateTimeString, formatter);
        } catch (Exception e) {
            System.out.println("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏ —Ç–∞ —á–∞—Å—É. –ö–æ—Ç–∏–∫ –∑–±–µ–Ω—Ç–µ–∂–µ–Ω–∏–π. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ —É —Ñ–æ—Ä–º–∞—Ç—ñ –†–†–†–†-–ú–ú-–î–î[T]–≥–≥:—Ö—Ö[:—Å—Å].");
            return;
        }

        System.out.println("–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–ø–∏—Å—É –∞–±–∏ –∫–æ—Ç–∏–∫ –∑–∞–ø–∏—Å–∞–≤ –≤–∞—â—ñ –¥—É–º–∫–∏ (–¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –Ω–∞ –ø–æ—Ä–æ–∂–Ω—å–æ–º—É —Ä—è–¥–∫—É):");
        String text = "";
        while (true) {
            String line = scanner.nextLine();
            if (line.isEmpty()) break;
            text += (text.isEmpty() ? "" : "\n") + line;
        }

        for (int i = 0; i < MAX_RECORDS; i++) {
            if (dates[i] == null) {
                dates[i] = dateTime;
                texts[i] = text;
                System.out.println("–ó–∞–ø–∏—Å —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ. –¶–µ —è–∫ –∑–∞–ª–∏—à–∏—Ç–∏ —Ç–µ–ø–ª–∏–π —Å–ª—ñ–¥ –ª–∞–ø–∫–∏ –≤ –ø–∞–º‚Äô—è—Ç—ñ.");
                return;
            }
        }

        System.out.println("–ö–æ—Ç–∏–∫ –∑–∞–ø–æ–≤–Ω–∏–≤ —â–æ–¥–µ–Ω–Ω–∏–∫ –Ω–∞ –º–∞–∫—Å–∏–º—É–º. –í–∏–¥–∞–ª—ñ—Ç—å –∑–∞–ø–∏—Å, —â–æ–± –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π, –∫–æ—Ç–∏–∫ –ø—Ä–∏–π–Ω—è–≤ –∑–∞–±–∞–≥–∞—Ç–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó.");
    }

    static void deleteEntry(Scanner scanner) {
        System.out.print("–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —Ç–∞ —á–∞—Å –∑–∞–ø–∏—Å—É, –∞–±–∏ –∫–æ—Ç–∏–≤ –∑–Ω–∞–≤ —â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏ (—É —Ñ–æ—Ä–º–∞—Ç—ñ –†–†–†–†-–ú–ú-–î–î[T]–≥–≥:—Ö—Ö[:—Å—Å]): ");
        String dateTimeString = scanner.nextLine();

        try {
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd['T']HH:mm[:ss]");
            LocalDateTime dateTimeToDelete = LocalDateTime.parse(dateTimeString, formatter);
            for (int i = 0; i < MAX_RECORDS; i++) {
                if (dateTimeToDelete.equals(dates[i])) {
                    dates[i] = null;
                    texts[i] = null;
                    System.out.println("–ó–∞–ø–∏—Å –≤–∏–¥–∞–ª–µ–Ω–æ. –Ü–Ω–æ–¥—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–ª–∏—à–∏—Ç–∏ –º—ñ—Å—Ü–µ –¥–ª—è –Ω–æ–≤–∏—Ö –º—É—Ä–∫–æ—Ç—ñ–Ω—å.");
                    return;
                }
            }
            System.out.println("–ö–æ—Ç–∏–∫ –Ω–µ –∑–Ω–∞–π—à–æ–≤ –∑–∞–ø–∏—Å –∑–∞ –≤–∫–∞–∑–∞–Ω–æ—é –¥–∞—Ç–æ—é —Ç–∞ —á–∞—Å–æ–º.");
        } catch (Exception e) {
            System.out.println("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏ —Ç–∞ —á–∞—Å—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ —É —Ñ–æ—Ä–º–∞—Ç—ñ –†–†–†–†-–ú–ú-–î–î[T]–≥–≥:—Ö—Ö[:—Å—Å].");
        }
    }

    static void showEntries() {
        boolean empty = true;
        System.out.println("–í–∞—à—ñ –∑–∞–ø–∏—Å–∏:");

        for (int i = 0; i < MAX_RECORDS; i++) {
            if (dates[i] != null) {
                System.out.println("–î–∞—Ç–∞ —Ç–∞ —á–∞—Å: " + dates[i]);
                System.out.println(texts[i]);
                empty = false;
            }
        }

        if (empty) {
            System.out.println("–ó–∞–ø–∏—Å—ñ–≤ –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î. –ê–ª–µ –∫–æ—Ç–∏–∫–∏ –≤—ñ—Ä—è—Ç—å —É –≤–∞—Å.");
        }
    }
}
//üò§üò§üò§üò§üò§üò§üò§ –ø–µ—Ä–µ–¥–µ–ª–∞–Ω–æüò∂
